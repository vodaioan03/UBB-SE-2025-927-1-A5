@{
    ViewData["Title"] = "Association";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    /*--- tiny styling tweaks ---*/
    .match-select {
        min-width: 120px;
    }

    .badge-check {
        font-size: .85rem;
    }
</style>

<div class="container py-5">
    <h1 class="text-center mb-4 display-6">Matching Exercise</h1>

    <!-- Instruction card -->
    <div class="card shadow-sm mx-auto mb-4" style="max-width: 680px;">
        <div class="card-body p-4">
            <h5 id="questionTitle" class="fw-semibold mb-3"></h5>
            <form id="matchForm" class="row gy-3" autocomplete="off"></form>
            <div class="d-flex justify-content-end mt-4">
                <button class="btn btn-primary" type="submit" form="matchForm"><i class="bi bi-check-circle me-1"></i>Submit</button>
            </div>
        </div>
    </div>

    <!-- Result card -->
    <div id="resultCard" class="card shadow-sm mx-auto d-none" style="max-width: 680px;">
        <div class="card-body p-4">
            <h5 id="resultHeader" class="fw-semibold"></h5>
            <div class="table-responsive mt-3">
                <table class="table table-bordered align-middle text-center">
                    <thead class="table-light">
                        <tr>
                            <th>Country</th>
                            <th>Your Answer</th>
                            <th>Correct</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody id="resultBody"></tbody>
                </table>
            </div>
            <button id="retryBtn" class="btn btn-outline-secondary mt-3"><i class="bi bi-arrow-clockwise me-1"></i>Try Again</button>
        </div>
    </div>
</div>

<!-- ==== Script (keeping logic modular & replaceable) ==== -->
@section Scripts {
    <script type="module">
        /***** Mock fetch – replace with real API / library call *****/
        async function getExercise() {
            // In production, swap this with: return await fetch('/api/association/1').then(r => r.json());
            return {
                id: 1,
                question: 'Match the countries with their capitals',
                pairs: [
                    { country: 'France', capital: 'Paris' },
                    { country: 'Germany', capital: 'Berlin' },
                    { country: 'Spain', capital: 'Madrid' }
                ]
            };
        }
        /***** Helper utilities *****/
        const shuffle = arr => arr.map(v => [v, Math.random()]).sort((a, b) => a[1] - b[1]).map(v => v[0]);

        /***** Render form *****/
        async function init() {
            const data = await getExercise();
            const form = document.getElementById('matchForm');
            const questionTitle = document.getElementById('questionTitle');

            questionTitle.textContent = data.question;

            // unique list of right‑hand options (shuffled)
            const capitalOptions = shuffle(data.pairs.map(p => p.capital));

            data.pairs.forEach((pair, idx) => {
                const col = document.createElement('div');
                col.className = 'col-md-4 col-12';

                col.innerHTML = `
                    <label class="form-label fw-semibold">${pair.country}</label>
                    <select class="form-select match-select" data-country="${pair.country}" required>
                        <option value="">Select…</option>
                        ${capitalOptions.map(c => `<option value="${c}">${c}</option>`).join('')}
                    </select>
                `;
                form.appendChild(col);
            });

            form.addEventListener('submit', function (e) {
                e.preventDefault();
                evaluate(form, data.pairs);
            });
        }

        /***** Evaluate answers *****/
        function evaluate(form, correctPairs) {
            const selects = form.querySelectorAll('select');
            const results = [];

            selects.forEach(sel => {
                results.push({
                    country: sel.dataset.country,
                    user: sel.value,
                    correct: correctPairs.find(p => p.country === sel.dataset.country).capital
                });
            });

            const score = results.filter(r => r.user === r.correct).length;
            renderResult(results, score, correctPairs.length);
        }

        /***** Render results table *****/
        function renderResult(results, score, total) {
            const resultCard = document.getElementById('resultCard');
            const resultBody = document.getElementById('resultBody');
            const resultHeader = document.getElementById('resultHeader');

            resultBody.innerHTML = results.map(r => `
                <tr>
                    <td>${r.country}</td>
                    <td>${r.user || '—'}</td>
                    <td>${r.correct}</td>
                    <td>${r.user === r.correct ? '<span class="badge bg-success badge-check"><i class="bi bi-check"></i></span>' : '<span class="badge bg-danger badge-check"><i class="bi bi-x"></i></span>'}</td>
                </tr>`).join('');

            resultHeader.innerHTML = score === total
                ? `<i class="bi bi-emoji-smile text-success me-1"></i> Perfect!`
                : `<i class="bi bi-emoji-neutral text-warning me-1"></i> You got ${score} / ${total}`;

            resultCard.classList.remove('d-none');
        }

        /***** Retry *****/
        document.getElementById('retryBtn').addEventListener('click', () => {
            const resultCard = document.getElementById('resultCard');
            resultCard.classList.add('d-none');
            document.getElementById('matchForm').reset();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        });

        // Kickoff
        init();
    </script>
}