@{
    ViewData["Title"] = "Multiple Choice";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .form-check + .form-check {
        margin-top: .5rem;
    }
</style>

<div class="container py-5">
    <h1 class="text-center mb-4 display-6">Multiple Choice</h1>

    <!-- Exercise Card -->
    <div id="exerciseCard" class="card shadow-sm mx-auto mb-4" style="max-width: 680px;">
        <div class="card-body p-4">
            <h5 id="questionTitle" class="fw-semibold mb-3"></h5>
            <form id="choiceForm" class="vstack gap-2"></form>
            <div class="d-flex justify-content-end mt-4">
                <button type="submit" form="choiceForm" class="btn btn-primary"><i class="bi bi-check-circle me-1"></i>Submit</button>
            </div>
        </div>
    </div>

    <!-- Feedback Card -->
    <div id="feedbackCard" class="card shadow-sm mx-auto d-none" style="max-width: 680px;">
        <div class="card-body p-4 text-center">
            <h5 id="feedbackHeader" class="fw-semibold"></h5>
            <p id="feedbackText" class="mb-0"></p>
            <button id="retryBtn" class="btn btn-outline-secondary mt-3"><i class="bi bi-arrow-clockwise me-1"></i>Try Again</button>
        </div>
    </div>
</div>

@section Scripts {
    <script type="module">
        /***** Mock fetch – swap with class‑library / API call later *****/
        async function getExercise() {
            // Replace with: return await exerciseService.GetByIdAsync(3);
            return {
                id: 3,
                question: 'Which of the following is correct?',
                choices: ['Option 1', 'Option 2', 'Option 3', 'Option 4'],
                correct: 'Option 2'
            };
        }

        /***** Utility *****/
        const shuffle = arr => arr.map(v => [v, Math.random()]).sort((a, b) => a[1] - b[1]).map(v => v[0]);

        /***** Render form *****/
        async function init() {
            const data = await getExercise();
            const form = document.getElementById('choiceForm');
            const questionTitle = document.getElementById('questionTitle');

            questionTitle.textContent = data.question;

            shuffle([...data.choices]).forEach((choice, i) => {
                const id = `choice_${i}`;
                const wrapper = document.createElement('div');
                wrapper.className = 'form-check';
                wrapper.innerHTML = `
                    <input type="radio" class="form-check-input" name="selectedChoice" id="${id}" value="${choice}" required />
                    <label class="form-check-label" for="${id}">${choice}</label>
                `;
                form.appendChild(wrapper);
            });

            form.addEventListener('submit', e => {
                e.preventDefault();
                const selected = form.querySelector('input[name=selectedChoice]:checked');
                if (!selected) return;
                const isCorrect = selected.value === data.correct;
                showFeedback(isCorrect, data.correct);
            });
        }

        /***** Feedback *****/
        function showFeedback(isCorrect, correctAnswer) {
            const card = document.getElementById('feedbackCard');
            const header = document.getElementById('feedbackHeader');
            const text = document.getElementById('feedbackText');

            header.innerHTML = isCorrect
                ? '<i class="bi bi-emoji-smile text-success me-1"></i> Correct!'
                : '<i class="bi bi-emoji-frown text-danger me-1"></i> Incorrect';

            text.textContent = isCorrect ? 'Great job!' : `The correct answer is ${correctAnswer}.`;

            card.classList.remove('d-none');
            card.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }

        /***** Retry *****/
        document.getElementById('retryBtn').addEventListener('click', () => {
            document.getElementById('choiceForm').reset();
            document.getElementById('feedbackCard').classList.add('d-none');
            window.scrollTo({ top: 0, behavior: 'smooth' });
        });

        // Kickoff
        init();
    </script>
}