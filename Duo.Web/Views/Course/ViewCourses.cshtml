@model List<DuoClassLibrary.Models.Course>
@using System.Text.Json
@{
    ViewData["Title"] = "Courses";
    var coursesJson = JsonSerializer.Serialize(Model.Select(c => new
    {
        id = c.CourseId,
        title = c.Title,
        description = c.Description,
        type = c.IsPremium ? "Premium" : "Free",
        image = c.ImageUrl,
        duration = TimeSpan.FromSeconds(c.TimeToComplete).ToString(@"h\h\ m\m"),
        difficulty = c.Difficulty
    }));
}

<div class="container">
    <h1 class="mb-4">Courses</h1>

    <div class="mb-4">
        <input type="text" id="searchInput" class="form-control" placeholder="Search courses..." onkeyup="handleSearch()">
    </div>

    <div class="mb-4">
        <select id="filterSelect" class="form-select" onchange="handleFilterChange()">
            <option value="All">All</option>
            <option value="Free">Free</option>
            <option value="Premium">Premium</option>
        </select>
    </div>

    <div class="row" id="courseContainer"></div>

    <nav>
        <ul class="pagination justify-content-center mt-4" id="pagination"></ul>
    </nav>
</div>

@section Scripts {
    <script>
        let allCourses = @Html.Raw(coursesJson);
        let filteredCourses = [...allCourses];
        const coursesPerPage = 6;
        let currentPage = 1;

        function renderCourses() {
            const courseContainer = document.getElementById("courseContainer");
            courseContainer.innerHTML = "";
            const startIndex = (currentPage - 1) * coursesPerPage;
            const endIndex = startIndex + coursesPerPage;
            const paginatedCourses = filteredCourses.slice(startIndex, endIndex);

            if (paginatedCourses.length === 0) {
                courseContainer.innerHTML = "<p>No courses found.</p>";
                return;
            }

            paginatedCourses.forEach(course => {
                const courseCard = document.createElement("div");
                courseCard.className = "col-md-4 mb-4";
                courseCard.innerHTML = `
                    <div class="card h-100">
                        <img src="${course.image}" class="card-img-top" alt="${course.title}">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">${course.title}</h5>
                            <p class="card-text">${course.description}</p>
                            <div class="mt-auto">
                                <span class="badge ${course.type === "Premium" ? "bg-warning" : "bg-success"}">${course.type}</span>
                                <span class="badge bg-info text-dark">${course.difficulty}</span>
                                <span class="badge bg-secondary">${course.duration}</span>
                                <a href="/Course/${course.id}" class="btn btn-sm btn-outline-primary mt-2">Preview</a>
                            </div>
                        </div>
                    </div>
                `;
                courseContainer.appendChild(courseCard);
            });
        }

        function renderPagination() {
            const pagination = document.getElementById("pagination");
            pagination.innerHTML = "";
            const pageCount = Math.ceil(filteredCourses.length / coursesPerPage);

            for (let i = 1; i <= pageCount; i++) {
                const pageItem = document.createElement("li");
                pageItem.className = `page-item ${i === currentPage ? "active" : ""}`;
                pageItem.innerHTML = `
                    <button class="page-link" onclick="changePage(${i})">${i}</button>
                `;
                pagination.appendChild(pageItem);
            }
        }

        function changePage(page) {
            currentPage = page;
            renderCourses();
            renderPagination();
        }

        function handleFilterChange() {
            const filter = document.getElementById("filterSelect").value;
            filterCourses();
        }

        function handleSearch() {
            filterCourses();
        }

        function filterCourses() {
            const searchQuery = document.getElementById("searchInput").value.toLowerCase();
            const filter = document.getElementById("filterSelect").value;

            filteredCourses = allCourses.filter(course => {
                const matchesSearch = course.title.toLowerCase().includes(searchQuery) ||
                                      course.description.toLowerCase().includes(searchQuery);
                const matchesFilter = filter === "All" || course.type === filter;
                return matchesSearch && matchesFilter;
            });

            currentPage = 1;
            renderCourses();
            renderPagination();
        }

        renderCourses();
        renderPagination();
    </script>
}